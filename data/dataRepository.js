// Generated by CoffeeScript 1.9.0
var clone, data, deleteFrom, fs, index, indexData, insertInto, loadData, selectFrom, updateIn;

fs = require('fs');

data = {};

index = {};

loadData = function() {
  data = JSON.parse(fs.readFileSync('data/data.json', 'utf8'));
  return indexData();
};

indexData = function() {
  var createIndex;
  createIndex = function(array) {
    var result;
    result = {
      _maxId: 0
    };
    if (array != null) {
      array.forEach(function(item, index) {
        result[item.id] = {
          item: item,
          index: index
        };
        if (item.id > result._maxId) {
          result._maxId = item.id;
        }
      });
    }
    return result;
  };
  return index = {
    shops: createIndex(data.shops),
    articles: createIndex(data.articles),
    receipts: createIndex(data.receipts)
  };
};

selectFrom = function(tableName, criteria, callback) {
  var idx, tbl, _ref;
  if ((criteria != null ? criteria.id : void 0) != null) {
    idx = index[tableName];
    return typeof callback === "function" ? callback(null, clone((_ref = idx[criteria.id]) != null ? _ref.item : void 0)) : void 0;
  }
  tbl = data[tableName];
  return typeof callback === "function" ? callback(null, clone(tbl)) : void 0;
};

insertInto = function(tableName, record, callback) {
  var i, idx, rec, tbl;
  tbl = data[tableName];
  idx = index[tableName];
  record.id = ++idx._maxId;
  rec = clone(record);
  i = tbl.push(rec);
  idx[rec.id] = {
    item: rec,
    index: i
  };
  return typeof callback === "function" ? callback(null, record) : void 0;
};

updateIn = function(tableName, record, callback) {
  var idx, idxData, rec, tbl;
  if ((record != null ? record.id : void 0) == null) {
    return;
  }
  idx = index[tableName];
  idxData = idx[record.id];
  if (idxData == null) {
    return;
  }
  tbl = data[tableName];
  rec = clone(record);
  tbl[idxData.index] = rec;
  idxData.item = rec;
  return typeof callback === "function" ? callback(null, record) : void 0;
};

deleteFrom = function(tableName, id, callback) {
  var idx, idxData, record, tbl;
  if (id == null) {
    return;
  }
  idx = index[tableName];
  idxData = idx[id];
  if (idxData == null) {
    return;
  }
  record = idxData.item;
  tbl = data[tableName];
  tbl[idxData.index] = null;
  delete idx[id];
  return typeof callback === "function" ? callback(null, record) : void 0;
};

clone = function(v) {
  return JSON.parse(JSON.stringify(v));
};

loadData();

module.exports = {
  shops: {
    select: function(criteria, callback) {
      return selectFrom('shops', criteria, callback);
    },
    insert: function(shop, callback) {
      return insertInto('shops', shop, callback);
    },
    update: function(shop, callback) {
      return updateIn('shops', shop, callback);
    },
    "delete": function(shop, callback) {
      return deleteFrom('shops', shop, callback);
    }
  },
  articles: {},
  receipts: {}
};
